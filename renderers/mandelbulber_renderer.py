#!/usr/bin/env python3
"""
Mandelbulber Renderer Integration

Provides interface to Mandelbulber for generating 3D fractals
with command-line rendering support.
"""

import subprocess
import json
import random
import math
import time
from pathlib import Path
from typing import Dict, List, Any, Optional, Tuple


class MandelbulberRenderer:
    """Integration with Mandelbulber 3D fractal renderer."""
    
    def __init__(self, output_dir: str = "output/mandelbulber_evolution"):
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(parents=True, exist_ok=True)
        self.settings_dir = self.output_dir / "settings"
        self.settings_dir.mkdir(parents=True, exist_ok=True)
        
        # Check if Mandelbulber is available
        self.mandelbulber_cmd = self._find_mandelbulber()
        if not self.mandelbulber_cmd:
            raise RuntimeError("Mandelbulber not found. Install with: flatpak install com.github.buddhi1980.mandelbulber2")
    
    def _find_mandelbulber(self) -> Optional[List[str]]:
        """Find available Mandelbulber installation."""
        # Try flatpak first
        try:
            result = subprocess.run(
                ["flatpak", "run", "com.github.buddhi1980.mandelbulber2", "--version"],
                capture_output=True, text=True, timeout=10
            )
            if result.returncode == 0:
                return ["flatpak", "run", "com.github.buddhi1980.mandelbulber2"]
        except:
            pass
        
        # Try system installation
        try:
            result = subprocess.run(
                ["mandelbulber2", "--version"],
                capture_output=True, text=True, timeout=10
            )
            if result.returncode == 0:
                return ["mandelbulber2"]
        except:
            pass
        
        return None
    
    def create_default_settings(self, name: str = "default") -> str:
        """Create a basic Mandelbulber settings file."""
        settings_content = """# Mandelbulber settings file
# Generated by FractalGenesis
# version 2.33

image_width=800
image_height=600
formula_1=9
detail_level=1.0
DE_thresh=0.01
DE_factor=1.0
N=250
view_distance_max=50
view_distance_min=1e-15

# Fractal formula parameters
power=8.0

# Camera settings
camera=3 -6 2
target=0 0 0
camera_rotation=26.565 -16.60154 0
fov=53.13

# Lighting and rendering
ambient_occlusion=1
ambient_occlusion_enabled=1
all_lights_intensity=1.0
glow_enabled=1
glow_intensity=1.0
brightness=1.0
contrast=1.0
gamma=1.0
saturation=1.0

# Background
background_color_1=0000 95a2 ffff
background_color_2=ffff ffff ffff
background_color_3=0000 2710 01f4
background_3_colors_enable=1

# Surface material
mat1_surface_color=c350 c350 c350
mat1_use_colors_from_palette=1
mat1_surface_gradient_enable=1
mat1_surface_color_gradient=0 fd6029 1000 698403 2000 fff59b 3000 f5bd22 4000 0b5e87 5000 c68876 6000 a51c64 7000 3b9fee 8000 d4ffd4 9000 aba53c
mat1_shading=1
mat1_specular=5.0
mat1_surface_roughness=0.01
mat1_metallic=1.0

# Output settings
file_destination={name}
save_image_format=0
"""
        
        settings_file = self.settings_dir / f"{name}.txt"
        with open(settings_file, 'w') as f:
            f.write(settings_content)
        
        return str(settings_file)
    
    def get_preset_parameters(self) -> List[Dict[str, Any]]:
        """Get a set of preset parameter configurations for good visual diversity."""
        presets = [
            # Classic Mandelbulb
            {
                "formula": 9, "mandelbulb_power": 8.0, "detail_level": 1.0,
                "camera_distance": 3.0, "camera_alpha": 45, "camera_beta": 20,
                "light_intensity": 120, "ambient_intensity": 60,
                "main_color_r": 255, "main_color_g": 150, "main_color_b": 50,
                "glow_enabled": True, "glow_intensity": 1.2
            },
            # High-power Mandelbulb
            {
                "formula": 9, "mandelbulb_power": 12.0, "detail_level": 1.2,
                "camera_distance": 2.8, "camera_alpha": 135, "camera_beta": -15,
                "light_intensity": 150, "ambient_intensity": 80,
                "main_color_r": 100, "main_color_g": 200, "main_color_b": 255,
                "glow_enabled": True, "glow_intensity": 1.5
            },
            # Mandelbox variation
            {
                "formula": 12, "mandelbulb_power": 6.0, "detail_level": 1.1,
                "camera_distance": 4.0, "camera_alpha": 270, "camera_beta": 35,
                "light_intensity": 180, "ambient_intensity": 50,
                "main_color_r": 200, "main_color_g": 50, "main_color_b": 200,
                "glow_enabled": False, "glow_intensity": 0.8
            },
        ]
        return presets
    
    def generate_random_parameters(self) -> Dict[str, Any]:
        """Generate random parameters for 3D fractal evolution with maximum diversity."""
        # Calculate camera position from spherical coordinates
        camera_distance = random.uniform(1.5, 12.0)  # Much wider range
        camera_alpha = random.uniform(0, 360)
        camera_beta = random.uniform(-60, 60)  # Wider vertical range
        
        alpha_rad = math.radians(camera_alpha)
        beta_rad = math.radians(camera_beta)
        
        camera_x = camera_distance * math.cos(beta_rad) * math.cos(alpha_rad)
        camera_y = camera_distance * math.cos(beta_rad) * math.sin(alpha_rad)
        camera_z = camera_distance * math.sin(beta_rad)
        
        # Generate vibrant random colors in Mandelbulber's hex format
        def random_color_hex():
            # Generate bright, saturated colors
            r = random.randint(100, 255)  # Avoid too dark
            g = random.randint(100, 255)
            b = random.randint(100, 255)
            return f"{r*257:04x} {g*257:04x} {b*257:04x}"
        
        # Generate gradient colors for variety
        gradient_colors = []
        for i in range(5):  # 5 gradient stops
            r = random.randint(50, 255)
            g = random.randint(50, 255) 
            b = random.randint(50, 255)
            gradient_colors.append(f"{i*2000} {r:02x}{g:02x}{b:02x}")
        gradient_string = " ".join(gradient_colors)
        
        
        return {
            # Fractal parameters with much wider variety
            "formula_1": random.choice([9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]),
            "power": random.uniform(2.0, 20.0),  # Much wider power range
            "detail_level": random.uniform(0.5, 3.0),  # Wider detail range
            "N": random.randint(100, 500),  # Variable iteration count
            
            # Camera position (calculated from spherical coordinates)
            "camera_x": camera_x,
            "camera_y": camera_y,
            "camera_z": camera_z,
            "target_x": random.uniform(-0.5, 0.5),  # Slight target variation
            "target_y": random.uniform(-0.5, 0.5),
            "target_z": random.uniform(-0.5, 0.5),
            "fov": random.uniform(30, 90),  # Variable field of view
            
            # Material colors and properties for vibrant fractals
            "mat1_surface_color": random_color_hex(),
            "mat1_specular": random.uniform(2.0, 10.0),
            "mat1_surface_roughness": random.uniform(0.001, 0.3),
            "mat1_metallic": random.uniform(0.5, 1.0),
            "mat1_reflectance": random.uniform(0.1, 0.9),
            "mat1_surface_color_gradient": gradient_string,
            "mat1_use_colors_from_palette": 1,
            "mat1_surface_gradient_enable": 1,
            "mat1_shading": 1,  # Enable shading
            
            # Background colors for variety
            "background_color_1": random_color_hex(),
            "background_color_2": random_color_hex(),
            "background_color_3": random_color_hex(),
            "background_3_colors_enable": 1,
            
            # Lighting setup using actual Mandelbulber parameters
            "fake_lights_enabled": random.choice([True, False]),
            "fake_lights_intensity": random.uniform(2.0, 5.0),
            "fake_lights_color": random_color_hex(),
            "fake_lights_visibility": random.uniform(2.0, 8.0),
            
            # Auxiliary lights - essential for proper lighting
            "aux_light_enabled_1": True,  # Always enabled
            "aux_light_x": random.uniform(2.0, 6.0),
            "aux_light_y": random.uniform(-6.0, 6.0),
            "aux_light_z": random.uniform(-6.0, 6.0),
            "aux_light_intensity_1": random.uniform(0.5, 2.0),
            "aux_light_colour_1": random_color_hex(),
            "aux_light_visibility": random.uniform(3.0, 10.0),
            
            # Random lights for better illumination
            "random_lights_enabled": random.choice([True, False]),
            "random_lights_intensity": random.uniform(1.0, 3.0),
            "random_lights_number": random.randint(5, 20),
            "random_lights_size": random.uniform(0.05, 0.3),
            "random_lights_color": random_color_hex(),
            "random_lights_visibility": random.uniform(1.0, 3.0),
            
            # Ambient occlusion for depth
            "ambient_occlusion_enabled": random.choice([True, False]),
            "ambient_occlusion": random.uniform(0.5, 2.0),
            
            # Lighting and rendering effects
            "glow_enabled": random.choice([True, True, True, False]),  # Favor glow
            "glow_intensity": random.uniform(0.5, 2.0),  # Use smaller range
            "brightness": random.uniform(2.0, 6.0),  # Brighter images
            "contrast": random.uniform(1.2, 2.5),  # Higher contrast
            "saturation": random.uniform(1.0, 2.0),  # More saturated
            "gamma": random.uniform(0.7, 1.3),
            "all_lights_intensity": random.uniform(1.5, 4.0),
        }
    
    def create_settings_from_parameters(self, params: Dict[str, Any], name: str) -> str:
        """Create Mandelbulber settings file from parameters using native format."""
        # Calculate camera position from spherical coordinates
        dist = params.get("camera_distance", 4.0)
        alpha_rad = math.radians(params.get("camera_alpha", 45))
        beta_rad = math.radians(params.get("camera_beta", 30))
        
        camera_x = dist * math.cos(beta_rad) * math.cos(alpha_rad)
        camera_y = dist * math.cos(beta_rad) * math.sin(alpha_rad)
        camera_z = dist * math.sin(beta_rad)
        
        # Calculate camera rotation to look at origin
        camera_rotation_y = -math.degrees(alpha_rad)
        camera_rotation_x = -math.degrees(beta_rad)
        
        # Use Mandelbulber's native parameter format (KEY=VALUE)
        settings_content = f"""# Mandelbulber settings file
# Generated by FractalGenesis
# version 2.33

image_width=512
image_height=512
formula_1={params.get('formula', 9)}
detail_level={params.get('detail_level', 1.0)}
DE_thresh={params.get('DE_thresh', 0.01)}
DE_factor={params.get('DE_factor', 1.0)}
N={params.get('max_iterations', 250)}
view_distance_max=50
view_distance_min=1e-15

# Fractal formula parameters
power={params.get('mandelbulb_power', 8.0)}

# Camera settings
camera={camera_x} {camera_y} {camera_z}
target=0 0 0
camera_rotation={camera_rotation_x} {camera_rotation_y} 0
fov={params.get('fov', 53.13)}

# Lighting and rendering
ambient_occlusion=1
ambient_occlusion_enabled={1 if params.get('ambient_occlusion_enabled', True) else 0}
all_lights_intensity={params.get('light_intensity', 100) / 100.0}
glow_enabled={1 if params.get('glow_enabled', True) else 0}
glow_intensity={params.get('glow_intensity', 1.0)}
brightness={params.get('brightness', 1.0)}
contrast={params.get('contrast', 1.0)}
gamma={params.get('gamma', 1.0)}
saturation={params.get('saturation', 1.0)}

# Background
background_color_1={int(params.get('background_value', 20) * 655.35)} {int(params.get('background_value', 20) * 655.35)} {int(params.get('background_value', 20) * 655.35)}
background_color_2=ffff ffff ffff
background_color_3=0000 2710 01f4
background_3_colors_enable=1

# Surface material
mat1_surface_color={int(params.get('main_color_r', 128) * 257)} {int(params.get('main_color_g', 128) * 257)} {int(params.get('main_color_b', 128) * 257)}
mat1_use_colors_from_palette=1
mat1_surface_gradient_enable=1
mat1_shading=1
mat1_specular={params.get('specular', 5.0)}
mat1_roughness={params.get('surface_roughness', 0.1)}
mat1_metallic={params.get('metallic', 1.0)}

# Output settings
file_destination={name}
save_image_format=0
"""
        
        settings_file = self.settings_dir / f"{name}.txt"
        with open(settings_file, 'w') as f:
            f.write(settings_content)
        
        return str(settings_file)
    
    def render_fractal(self, params: Dict[str, Any], output_file: str, 
                      width: int = 512, height: int = 512) -> bool:
        """Render a fractal using Mandelbulber with complete settings file."""
        try:
            # Create complete settings file with proper format
            settings_name = Path(output_file).stem
            settings_file = self.settings_dir / f"{settings_name}.fract" 
            
            # Create comprehensive settings content
            settings_content = self._create_complete_settings(params, width, height)
            
            with open(settings_file, 'w') as f:
                f.write(settings_content)
            
            # Simple render command using the complete settings file
            cmd = self.mandelbulber_cmd + [
                "--nogui",  # No GUI
                "--format", "png",
                "--res", f"{width}x{height}",
                "--output", output_file,
                str(settings_file)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=120  # 2 minute timeout
            )
            
            # Check if output file was created
            return result.returncode == 0 and Path(output_file).exists()
            
        except subprocess.TimeoutExpired:
            print(f"Rendering timed out for {output_file}")
            return False
        except Exception as e:
            print(f"Error rendering {output_file}: {e}")
            return False
    
    def mutate_parameters(self, params: Dict[str, Any], mutation_rate: float = 0.3) -> Dict[str, Any]:
        """Create mutated version of parameters for evolution with enhanced diversity."""
        mutated = params.copy()
        
        # Helper function to mutate colors
        def mutate_color_hex(color_hex):
            try:
                # Parse existing hex color and mutate it
                parts = color_hex.split()
                if len(parts) == 3:
                    r = max(0, min(65535, int(parts[0], 16) + random.randint(-8000, 8000)))
                    g = max(0, min(65535, int(parts[1], 16) + random.randint(-8000, 8000)))
                    b = max(0, min(65535, int(parts[2], 16) + random.randint(-8000, 8000)))
                    return f"{r:04x} {g:04x} {b:04x}"
            except:
                pass
            # Fallback to new random color
            r = random.randint(100, 255) * 257
            g = random.randint(100, 255) * 257  
            b = random.randint(100, 255) * 257
            return f"{r:04x} {g:04x} {b:04x}"
        
        # Mutate each parameter with appropriate ranges
        for key, value in mutated.items():
            if random.random() < mutation_rate:
                if key == "formula_1":
                    # Sometimes completely change formula, sometimes stay similar
                    if random.random() < 0.3:
                        mutated[key] = random.choice([9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])
                    else:
                        # Small change to similar formula
                        mutated[key] = max(9, min(20, value + random.choice([-1, 0, 1])))
                        
                elif key == "power":
                    # Wider mutation range for power
                    mutated[key] = max(2.0, min(20.0, value * random.uniform(0.5, 2.0)))
                    
                elif key == "detail_level":
                    mutated[key] = max(0.5, min(3.0, value * random.uniform(0.7, 1.4)))
                    
                elif key == "N":
                    mutated[key] = max(50, min(500, value + random.randint(-50, 100)))
                    
                elif key in ["camera_x", "camera_y", "camera_z"]:
                    # Larger camera movements for diversity
                    mutated[key] = value * random.uniform(0.5, 1.8)
                    
                elif key in ["target_x", "target_y", "target_z"]:
                    mutated[key] = max(-1.0, min(1.0, value + random.uniform(-0.3, 0.3)))
                    
                elif key == "fov":
                    mutated[key] = max(20, min(120, value + random.uniform(-15, 15)))
                    
                elif key in ["mat1_surface_color", "background_color_1", "background_color_2", "background_color_3"]:
                    mutated[key] = mutate_color_hex(value)
                    
                elif key in ["mat1_specular"]:
                    mutated[key] = max(1.0, min(15.0, value * random.uniform(0.7, 1.5)))
                    
                elif key in ["mat1_surface_roughness"]:
                    mutated[key] = max(0.001, min(0.5, value * random.uniform(0.5, 2.0)))
                    
                elif key in ["mat1_metallic", "mat1_reflectance"]:
                    mutated[key] = max(0.0, min(1.0, value + random.uniform(-0.2, 0.2)))
                    
                elif key == "glow_intensity":
                    mutated[key] = max(0.5, min(5.0, value * random.uniform(0.6, 1.6)))
                    
                elif key == "brightness":
                    mutated[key] = max(1.5, min(8.0, value * random.uniform(0.7, 1.4)))
                    
                elif key in ["contrast", "saturation"]:
                    mutated[key] = max(0.8, min(3.0, value * random.uniform(0.7, 1.4)))
                    
                elif key == "gamma":
                    mutated[key] = max(0.5, min(1.5, value * random.uniform(0.8, 1.2)))
                    
                elif key == "all_lights_intensity":
                    mutated[key] = max(0.5, min(6.0, value * random.uniform(0.7, 1.4)))
                    
                elif key in ["aux_light_x", "aux_light_y", "aux_light_z"]:
                    mutated[key] = value + random.uniform(-2.0, 2.0)
                    
                elif key == "aux_light_intensity_1":
                    mutated[key] = max(0.3, min(3.0, value * random.uniform(0.7, 1.4)))
                    
                elif key == "aux_light_visibility":
                    mutated[key] = max(2.0, min(15.0, value * random.uniform(0.8, 1.3)))
                    
                elif key in ["aux_light_colour_1"]:
                    mutated[key] = mutate_color_hex(value)
                    
                elif key in ["glow_enabled", "ambient_occlusion_enabled", "background_3_colors_enable", "fake_lights_enabled", "random_lights_enabled", "aux_light_enabled_1"]:
                    mutated[key] = random.choice([True, False]) if random.random() < 0.4 else value
        
        return mutated
    
    def _create_complete_settings(self, params: Dict[str, Any], width: int, height: int) -> str:
        """Create a complete Mandelbulber settings file with proper auxiliary lights and material definition."""
        
        # Extract parameters with defaults
        formula = params.get('formula_1', 9)
        power = params.get('power', 8.0)
        detail_level = params.get('detail_level', 1.0)
        N = params.get('N', 250)
        
        # Camera parameters
        camera_x = params.get('camera_x', 3)
        camera_y = params.get('camera_y', -6)
        camera_z = params.get('camera_z', 2)
        target_x = params.get('target_x', 0)
        target_y = params.get('target_y', 0)
        target_z = params.get('target_z', 0)
        fov = params.get('fov', 53.13)
        
        # Material parameters - CRITICAL for visibility
        mat_color = params.get('mat1_surface_color', 'ff00 8000 4000')
        mat_specular = params.get('mat1_specular', 2.27)  # Use value from working example
        mat_roughness = params.get('mat1_surface_roughness', 0.01)
        mat_metallic = params.get('mat1_metallic', False)  # Set to False like working example
        mat_reflectance = params.get('mat1_reflectance', 1.0)  # Higher reflectance
        mat_gradient = params.get('mat1_surface_color_gradient', '0 9e8e5d 1999 4f2744 3999 ed4852 5999 380091 7999 fcbe3d')  # From working example
        
        # Lighting parameters
        glow_enabled = 1 if params.get('glow_enabled', True) else 0
        glow_intensity = params.get('glow_intensity', 1.0)
        brightness = params.get('brightness', 1.45)  # From working example
        contrast = params.get('contrast', 1.0)
        saturation = params.get('saturation', 1.2)
        gamma = params.get('gamma', 0.42)  # From working example
        
        fake_lights_enabled = 1 if params.get('fake_lights_enabled', True) else 0
        fake_lights_intensity = params.get('fake_lights_intensity', 3.0)
        fake_lights_visibility = params.get('fake_lights_visibility', 5.0)
        fake_lights_color = params.get('fake_lights_color', 'ffff ffff ffff')
        
        random_lights_intensity = params.get('random_lights_intensity', 2.0)
        random_lights_number = params.get('random_lights_number', 10)
        random_lights_size = params.get('random_lights_size', 0.1)
        random_lights_color = params.get('random_lights_color', 'ffff ffff ffff')
        
        ambient_occlusion_enabled = 1 if params.get('ambient_occlusion_enabled', True) else 0
        ambient_occlusion = params.get('ambient_occlusion', 1.5)
        
        # Background parameters
        bg_color_1 = params.get('background_color_1', '4000 8000 ff00')
        bg_color_2 = params.get('background_color_2', 'ffff ffff ffff')
        bg_color_3 = params.get('background_color_3', '0000 2710 01f4')
        
        # Auxiliary light parameters - CRITICAL for proper lighting
        aux_light_enabled = 1 if params.get('aux_light_enabled_1', True) else 0
        aux_light_x = params.get('aux_light_x', 3.0)
        aux_light_y = params.get('aux_light_y', -3.0)
        aux_light_z = params.get('aux_light_z', -3.0)
        aux_light_intensity = params.get('aux_light_intensity_1', 1.3)
        aux_light_color = params.get('aux_light_colour_1', 'e800 9500 4200')
        aux_light_visibility = params.get('aux_light_visibility', 6.0256)
        
        # Create complete settings content with auxiliary lights
        settings_content = f"""# Mandelbulber settings file
# version 2.33
# Generated by FractalGenesis with auxiliary lights

image_width={width}
image_height={height}
formula_1={formula}
detail_level={detail_level}
N={N}
power={power}

# Camera settings
camera={camera_x} {camera_y} {camera_z}
target={target_x} {target_y} {target_z}
fov={fov}
camera_rotation=26.565 -16.60154 0

# Fractal settings
DE_thresh=0.01
DE_factor=0.7
view_distance_max=12
view_distance_min=1e-15
analityc_DE_mode=1

        # CRITICAL: Associate formula 1 with material 1
        formula_material_id_1=1
        
        # Material 1 - properly defined based on working example
        mat1_is_defined=true
        mat1_surface_color={mat_color}
        mat1_shading=1
        mat1_specular={mat_specular}
        mat1_surface_roughness={mat_roughness}
        mat1_metallic={str(mat_metallic).lower()}
        mat1_reflectance={mat_reflectance}
        mat1_use_colors_from_palette=1
        mat1_surface_gradient_enable=1
        mat1_surface_color_gradient={mat_gradient}
        mat1_coloring_speed=2
        mat1_fresnel_reflectance=true
        mat1_specular_width=0.437

# Auxiliary light 1 - ESSENTIAL for proper lighting
aux_light_enabled_1={str(aux_light_enabled).lower()}
aux_light_position_1={aux_light_x} {aux_light_y} {aux_light_z}
aux_light_intensity_1={aux_light_intensity}
aux_light_colour_1={aux_light_color}
aux_light_visibility={aux_light_visibility}
aux_light_visibility_size=0.562341

# Lighting configuration
glow_enabled={glow_enabled}
glow_intensity={glow_intensity}
brightness={brightness}
contrast={contrast}
saturation={saturation}
gamma={gamma}

# Fake lights for additional illumination
fake_lights_enabled=1
fake_lights_intensity={fake_lights_intensity}
fake_lights_visibility={fake_lights_visibility}
fake_lights_color={fake_lights_color}
fake_lights_thickness=2

# Random lights - also enabled for better illumination
random_lights_intensity={random_lights_intensity}
random_lights_number={random_lights_number}
random_lights_size={random_lights_size}
random_lights_color={random_lights_color}
random_lights_visibility=1
random_lights_cast_shadows=1

# Ambient occlusion
ambient_occlusion_enabled={ambient_occlusion_enabled}
ambient_occlusion={ambient_occlusion}
ambient_occlusion_quality=4

# Background
background_3_colors_enable=1
background_color_1={bg_color_1}
background_color_2={bg_color_2}
background_color_3={bg_color_3}

# Global lighting
all_lights_intensity={params.get('all_lights_intensity', 2.0)}

# Output
file_destination=fractal_output
save_image_format=0
"""
        
        return settings_content
    
    def crossover_parameters(self, parent1: Dict[str, Any], parent2: Dict[str, Any]) -> Dict[str, Any]:
        """Create offspring by combining two parameter sets."""
        offspring = {}
        
        for key in parent1.keys():
            if random.random() < 0.5:
                offspring[key] = parent1[key]
            else:
                offspring[key] = parent2[key]
        
        return offspring
    
    def test_installation(self) -> bool:
        """Test if Mandelbulber is properly installed and working."""
        try:
            print("Testing Mandelbulber installation...")
            
            # Create test parameters
            test_params = {
                'glow_enabled': True,
                'glow_intensity': 2.0,
                'brightness': 2.5,
                'contrast': 1.2,
                'camera_x': 3,
                'camera_y': -6,
                'camera_z': 2,
                'target_x': 0,
                'target_y': 0,
                'target_z': 0,
                'power': 8.0,
                'formula_1': 9,
                'fake_lights_enabled': True,
                'fake_lights_intensity': 2.0
            }
            test_output = self.output_dir / "test_render.png"
            
            # Try to render
            success = self.render_fractal(test_params, str(test_output), 256, 256)
            
            if success:
                print(f"✅ Mandelbulber test successful! Test image: {test_output}")
                return True
            else:
                print("❌ Mandelbulber test failed - rendering unsuccessful")
                return False
                
        except Exception as e:
            print(f"❌ Mandelbulber test failed: {e}")
            return False


def test_mandelbulber():
    """Test function for Mandelbulber integration."""
    try:
        renderer = MandelbulberRenderer()
        
        if renderer.test_installation():
            print("\n🎉 Mandelbulber integration is working!")
            
            # Generate some test parameters
            params = renderer.generate_random_parameters()
            print(f"\nGenerated random parameters: {params}")
            
            # Render directly with parameters
            output_file = str(renderer.output_dir / "random_test.png")
            
            if renderer.render_fractal(params, output_file, 400, 400):
                print(f"✅ Random fractal rendered: {output_file}")
            else:
                print("❌ Random fractal rendering failed")
        
    except Exception as e:
        print(f"❌ Mandelbulber integration test failed: {e}")


if __name__ == "__main__":
    test_mandelbulber()
